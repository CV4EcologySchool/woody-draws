# -*- coding: utf-8 -*-
"""DownloadWDImageChips.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MyutUeH_XeP2pAnQGLTkve8Qxhfz0ZhA

Rachell Renne (Aka earth engine genius wizard) wrote all of this except
the python string formatting lmao

"""

import ee
ee.Initialize()

draws = ee.FeatureCollection("users/Ethanshafron/draws_k5_sdindex_kmeans_access_trig_20220408")
npts = draws.size().getInfo()
naipyear = ee.ImageCollection('USDA/NAIP/DOQQ')\
    .filterDate('2019-01-01', '2022-01-01')\
    .select('R','G','B','N')

naipyear

naipmosaic = naipyear.mosaic()


def newID(newSysIndex):
    feat = ee.Feature(gridList.get(newSysIndex))
    # format number to string
    indexString = ee.Number(newSysIndex)
    return feat.set('ID', indexString)

ptList = draws.toList(draws.size())

#Loop through points
for i in range(0, npts):
  print(i)
  thispt = ptList.get(i)
  # print(thispt)
  # transform point
  thispt1 = ee.Feature(thispt).transform('EPSG:26913',0.001)
  # get the relevant image
  thisImage = naipyear.filterBounds(thispt1.geometry()).first()
  # Get image ID
  imgid = thisImage.id().getInfo()
  # Get projection information for NAIP (varies by tile/location)
  thisProjection = thisImage.select('R').projection()
  # Get image ID
  imgid = thisImage.id().getInfo()
  # Create grid
  thisGrid = thisImage.geometry(0.001, thisProjection).coveringGrid(thisProjection,153.6)
  # make a list of length of features
  idList = ee.List.sequence(0,thisGrid.size().subtract(1))
  # featureCollection to a List
  gridList = thisGrid.toList(thisGrid.size())
  # Set new IDs
  assetID = ee.FeatureCollection(idList.map(newID))
  # Create updated feature collection
  updatedGrid = ee.FeatureCollection(assetID)
  # Pull out a cell that contains a feature of interest
  theseCells = ee.FeatureCollection(updatedGrid.filterBounds(thispt1.geometry()))
  theseCellsList = theseCells.toList(theseCells.size())
  ncells = theseCells.size().getInfo()
  for x in range(0, ncells):
    print("on chip {} of {}".format(x, ncells))
    cell = ee.Feature(theseCellsList.get(x))
    #print(cell)
    cellnum = ee.Feature(cell).get('ID').getInfo()
    oid = ee.Feature(thispt).get("OBJECTID").getInfo()
    fileName = "{}_{}_oid{}".format(imgid, str(cellnum), oid)
    #print(str(i) + ': ' + fileName)
    
    #Process the export for you image into the bucket in GCS
    task = ee.batch.Export.image.toDrive(**{
        'image': naipmosaic,
        'description': 'ExportWDImageChips',
        'crs': thisProjection,
        'scale': 0.6,
        'fileDimensions': 256,
        'fileNamePrefix': fileName,
        'region': cell.geometry(),
        'fileFormat': 'GeoTIFF',
        'maxPixels': 10000000000000,
        'folder': "WoodyDraws",
        'formatOptions': {'cloudOptimized': True},
        'skipEmptyTiles': True})
    task.start()
